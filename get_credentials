#!/usr/bin/env python

'''
  Print specified AWS access key id or secret key on stdout.

  Before using this code, set CREDENTIALS_PATH to
  the full absolute path to the directory where your credentials*.csv
  files are stored.

  The single argument to the program is either 'key_id' or 'secret_key'.
  It will print on stdout the requested value from a file with the
  name 'credentials(-\d*).csv'. Given multiple files matching this pattern,
  the program will start at credentials.csv and work up to the highest
  consecutively-numbered filename.  It will stop at the first gap,
  so if the directory has credentials.csv, credentials-1.csv, 
  credentials-2.csv, and credentials-4.csv, the program will
  read from credentials-2.csv.

  GIVEN THAT THIS PROGRAM PRINTS HIGHLY SENSITIVE INFORMATION
  ON STDOUT, IT SHOULD ONLY BE RUN WITHIN A $(...) BLOCK INSIDE
  A SHELL SCRIPT.

  Example usage:
	ACCESS_KEY_ID=$(./get_credentials key_id)
'''

CREDENTIALS_PATH= "/home/kenny/Desktop/"
CREDENTIALS_BASE="credentials"

import csv
import sys
import os.path

if len(sys.argv) != 2:
    sys.stderr.write("Must provide argument (key_id or secret_key)\n")
    sys.exit(3)

base_name = os.path.join(CREDENTIALS_PATH, CREDENTIALS_BASE)
current_name = base_name+'.csv'

if not os.path.isfile(current_name):
    sys.stderr.write("No credentials file: '{0}'\n".format(current_name))
    sys.exit(1)

count = 1
next_name = '{0}-{1}.csv'.format(base_name, count)
while os.path.isfile(next_name):
    current_name = next_name
    count += 1
    next_name = '{0}-{1}.csv'.format(base_name, count)

with open(current_name,'r') as inp:
    csv = csv.reader(inp)
    # Skip header
    csv.next()
    name, key_id, secret_key = csv.next()

if sys.argv[1] == "key_id":
    print key_id
elif sys.argv[1] == "secret_key":
    print secret_key
else:
    sys.stderr.write("Unrecognized argument: {0}\n".format(sys.argv[1]))
    sys.exit(2)
